{"ast":null,"code":"// src/store.js\nimport { createStore } from 'vuex';\nimport { loginUser, getUserProfile, registerUser, updateUserProfile, deleteUserProfile } from './api/BackendApi';\nexport default createStore({\n  state: {\n    user: null,\n    token: localStorage.getItem('auth_token') || null // Get token from localStorage on app load\n  },\n  mutations: {\n    setUser(state, user) {\n      state.user = user;\n    },\n    setToken(state, token) {\n      state.token = token;\n      if (token) {\n        localStorage.setItem('auth_token', token); // Save token in localStorage\n        console.log('Token set in localStorage');\n      } else {\n        localStorage.removeItem('auth_token'); // Remove token from localStorage on logout\n        console.log('Token removed from localStorage');\n      }\n    }\n  },\n  actions: {\n    // Login action\n    async login({\n      commit\n    }, credentials) {\n      try {\n        const res = await loginUser(credentials);\n        const token = res.data.token;\n        console.log('Token received:', token);\n        commit('setToken', token); // Store token in Vuex and localStorage\n        const profileRes = await getUserProfile(token);\n        commit('setUser', profileRes.data);\n        return true;\n      } catch (error) {\n        console.error('Login failed:', error);\n        throw error;\n      }\n    },\n    // Fetch user on app startup if token exists\n    async fetchUser({\n      state,\n      commit\n    }) {\n      if (!state.token) return null; // If no token, return null\n      try {\n        const res = await getUserProfile(state.token); // Use token to fetch profile\n        commit('setUser', res.data);\n        console.log('User profile fetched:', res.data);\n        return res.data;\n      } catch (error) {\n        console.error('Failed to fetch user profile:', error);\n        commit('setUser', null);\n        commit('setToken', null); // Clear token if fetch fails\n        return null;\n      }\n    },\n    // Logout action\n    logout({\n      commit\n    }) {\n      commit('setUser', null);\n      commit('setToken', null); // Clear token from localStorage and Vuex\n    },\n    // Register action\n    async register({\n      dispatch\n    }, userData) {\n      await registerUser(userData);\n      return dispatch('login', {\n        email: userData.email,\n        password: userData.password\n      });\n    },\n    // Update user profile action\n    async updateProfile({\n      state\n    }, userData) {\n      console.log('Updating user profile with data:', userData);\n      if (!state.token) throw new Error('No token found. User must be logged in to update profile.');\n      return await updateUserProfile(state.token, userData);\n    },\n    // Delete user profile action\n    async deleteProfile({\n      state,\n      dispatch\n    }) {\n      await deleteUserProfile(state.token);\n      dispatch('logout');\n    }\n  },\n  getters: {\n    userData: state => state.user,\n    isAuthenticated: state => !!state.token // Check if there's a token\n  }\n});","map":{"version":3,"names":["createStore","loginUser","getUserProfile","registerUser","updateUserProfile","deleteUserProfile","state","user","token","localStorage","getItem","mutations","setUser","setToken","setItem","console","log","removeItem","actions","login","commit","credentials","res","data","profileRes","error","fetchUser","logout","register","dispatch","userData","email","password","updateProfile","Error","deleteProfile","getters","isAuthenticated"],"sources":["C:/Users/TyreseMakhubele/Documents/GitHub/Smart-Travel-Planner-App-Frontend/src/store.js"],"sourcesContent":["// src/store.js\r\nimport { createStore } from 'vuex';\r\nimport {\r\n  loginUser,\r\n  getUserProfile,\r\n  registerUser,\r\n  updateUserProfile,\r\n  deleteUserProfile\r\n} from './api/BackendApi';\r\n\r\nexport default createStore({\r\n  state: {\r\n    user: null,\r\n    token: localStorage.getItem('auth_token') || null,  // Get token from localStorage on app load\r\n  },\r\n  mutations: {\r\n    setUser(state, user) {\r\n      state.user = user;\r\n    },\r\n    setToken(state, token) {\r\n      state.token = token;\r\n      if (token) {\r\n        localStorage.setItem('auth_token', token); // Save token in localStorage\r\n        console.log('Token set in localStorage');\r\n      } else {\r\n        localStorage.removeItem('auth_token'); // Remove token from localStorage on logout\r\n        console.log('Token removed from localStorage');\r\n      }\r\n    },\r\n  },\r\n  actions: {\r\n    // Login action\r\n    async login({ commit }, credentials) {\r\n      try {\r\n        const res = await loginUser(credentials);\r\n        const token = res.data.token;\r\n        console.log('Token received:', token);\r\n        commit('setToken', token); // Store token in Vuex and localStorage\r\n        const profileRes = await getUserProfile(token);\r\n        commit('setUser', profileRes.data);\r\n        return true;\r\n      } catch (error) {\r\n        console.error('Login failed:', error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Fetch user on app startup if token exists\r\n    async fetchUser({ state, commit }) {\r\n      if (!state.token) return null; // If no token, return null\r\n      try {\r\n        const res = await getUserProfile(state.token); // Use token to fetch profile\r\n        commit('setUser', res.data);\r\n        console.log('User profile fetched:', res.data);\r\n        return res.data;\r\n      } catch (error) {\r\n        console.error('Failed to fetch user profile:', error);\r\n        commit('setUser', null);\r\n        commit('setToken', null); // Clear token if fetch fails\r\n        return null;\r\n      }\r\n    },\r\n\r\n    // Logout action\r\n    logout({ commit }) {\r\n      commit('setUser', null);\r\n      commit('setToken', null); // Clear token from localStorage and Vuex\r\n    },\r\n\r\n    // Register action\r\n    async register({ dispatch }, userData) {\r\n      await registerUser(userData);\r\n      return dispatch('login', {\r\n        email: userData.email,\r\n        password: userData.password,\r\n      });\r\n    },\r\n\r\n    // Update user profile action\r\n    async updateProfile({ state }, userData) {\r\n      console.log('Updating user profile with data:', userData);\r\n      if (!state.token) throw new Error('No token found. User must be logged in to update profile.');\r\n      return await updateUserProfile(state.token, userData);\r\n    },\r\n\r\n    // Delete user profile action\r\n    async deleteProfile({ state, dispatch }) {\r\n      await deleteUserProfile(state.token);\r\n      dispatch('logout');\r\n    },\r\n  },\r\n  getters: {\r\n    userData: (state) => state.user,\r\n    isAuthenticated: (state) => !!state.token,  // Check if there's a token\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}