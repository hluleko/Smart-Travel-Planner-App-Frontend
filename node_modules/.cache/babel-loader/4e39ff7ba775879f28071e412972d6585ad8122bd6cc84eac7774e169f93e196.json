{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/* global google */\nimport { googleMapsApiKey } from \"@/config\";\nexport default {\n  name: \"LocationSearch\",\n  data() {\n    return {\n      searchQuery: \"\",\n      fromQuery: \"\",\n      map: null,\n      selectedLocation: null,\n      fromLocation: null,\n      startDate: \"\",\n      endDate: \"\",\n      numPeople: 1,\n      distance: 0,\n      places: [],\n      loading: false,\n      defaultImage: \"https://via.placeholder.com/150?text=No+Image\",\n      apiKey: googleMapsApiKey\n    };\n  },\n  mounted() {\n    this.loadGoogleMaps();\n  },\n  computed: {\n    numDays() {\n      if (!this.startDate || !this.endDate) return 1;\n      const start = new Date(this.startDate);\n      const end = new Date(this.endDate);\n      const days = Math.ceil((end - start) / (1000 * 60 * 60 * 24));\n      return days > 0 ? days : 1;\n    }\n  },\n  methods: {\n    loadGoogleMaps() {\n      if (!window.google || !window.google.maps) {\n        const script = document.createElement(\"script\");\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${this.apiKey}&libraries=places`;\n        script.async = true;\n        script.defer = true;\n        script.crossOrigin = \"anonymous\";\n        script.onload = this.initMap;\n        document.head.appendChild(script);\n      } else {\n        this.initMap();\n      }\n    },\n    initMap() {\n      const dummyDiv = document.createElement(\"div\");\n      this.map = new google.maps.Map(dummyDiv);\n      this.initAutocomplete();\n    },\n    initAutocomplete() {\n      const toInput = document.getElementById(\"location-input\");\n      const fromInput = document.getElementById(\"from-input\");\n      const toAutocomplete = new google.maps.places.Autocomplete(toInput, {\n        componentRestrictions: {\n          country: \"ZA\"\n        },\n        fields: [\"geometry\", \"name\"]\n      });\n      const fromAutocomplete = new google.maps.places.Autocomplete(fromInput, {\n        componentRestrictions: {\n          country: \"ZA\"\n        },\n        fields: [\"geometry\", \"name\"]\n      });\n      toAutocomplete.addListener(\"place_changed\", () => {\n        const place = toAutocomplete.getPlace();\n        if (place.geometry) {\n          this.selectedLocation = place.geometry.location;\n        }\n      });\n      fromAutocomplete.addListener(\"place_changed\", () => {\n        const place = fromAutocomplete.getPlace();\n        if (place.geometry) {\n          this.fromLocation = place.geometry.location;\n        }\n      });\n    },\n    handleSearch() {\n      if (!this.selectedLocation || !this.fromLocation) {\n        alert(\"Please select both a 'from' and 'to' location.\");\n        return;\n      }\n      this.calculateDistance().then(() => {\n        this.fetchNearbyPlaces(this.selectedLocation);\n      });\n    },\n    calculateDistance() {\n      console.log(\"Calculating distance...\");\n      return new Promise(resolve => {\n        const service = new google.maps.DistanceMatrixService();\n        service.getDistanceMatrix({\n          origins: [this.fromLocation],\n          destinations: [this.selectedLocation],\n          travelMode: google.maps.TravelMode.DRIVING\n        }, (response, status) => {\n          if (status === \"OK\") {\n            const distanceMeters = response.rows[0].elements[0].distance.value;\n            this.distance = (distanceMeters / 1000).toFixed(1);\n            resolve();\n          } else {\n            console.error(\"Distance Matrix Error:\", status);\n            this.distance = 0;\n            resolve();\n          }\n        });\n      });\n    },\n    fetchNearbyPlaces(location) {\n      this.loading = true;\n      this.places = [];\n      const request = {\n        query: \"tourist attractions, parks, restaurants, museums\",\n        location,\n        radius: 5000\n      };\n      const service = new google.maps.places.PlacesService(this.map);\n      service.textSearch(request, (results, status) => {\n        if (status !== google.maps.places.PlacesServiceStatus.OK || !results) {\n          console.error(\"Error fetching places:\", status);\n          this.loading = false;\n          return;\n        }\n        const placePromises = results.map(place => {\n          return new Promise(resolve => {\n            service.getDetails({\n              placeId: place.place_id,\n              fields: [\"name\", \"formatted_address\", \"rating\", \"photos\"]\n            }, (details, status) => {\n              if (status === google.maps.places.PlacesServiceStatus.OK) {\n                const budget = this.calculateBudgetForPlace();\n                resolve({\n                  name: details.name,\n                  rating: details.rating,\n                  address: details.formatted_address,\n                  photo: details.photos?.[0]?.getUrl({\n                    maxWidth: 300\n                  }) || null,\n                  budget: budget\n                });\n              } else {\n                resolve(null);\n              }\n            });\n          });\n        });\n        Promise.all(placePromises).then(placesData => {\n          this.places = placesData.filter(p => p !== null);\n          this.loading = false;\n        });\n      });\n    },\n    calculateBudgetForPlace() {\n      const basePerPersonPerDay = 1000;\n      const travelRatePerKm = 5;\n      const base = this.numPeople * this.numDays * basePerPersonPerDay;\n      const travel = this.distance * travelRatePerKm;\n      const randomVariation = Math.floor(Math.random() * 2000); // R0 - R1999\n\n      const minBudget = base + travel;\n      const maxBudget = minBudget + randomVariation + 1000;\n      return `R${Math.floor(minBudget).toLocaleString()} - R${Math.floor(maxBudget).toLocaleString()}`;\n    }\n  }\n};","map":{"version":3,"names":["googleMapsApiKey","name","data","searchQuery","fromQuery","map","selectedLocation","fromLocation","startDate","endDate","numPeople","distance","places","loading","defaultImage","apiKey","mounted","loadGoogleMaps","computed","numDays","start","Date","end","days","Math","ceil","methods","window","google","maps","script","document","createElement","src","async","defer","crossOrigin","onload","initMap","head","appendChild","dummyDiv","Map","initAutocomplete","toInput","getElementById","fromInput","toAutocomplete","Autocomplete","componentRestrictions","country","fields","fromAutocomplete","addListener","place","getPlace","geometry","location","handleSearch","alert","calculateDistance","then","fetchNearbyPlaces","console","log","Promise","resolve","service","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","TravelMode","DRIVING","response","status","distanceMeters","rows","elements","value","toFixed","error","request","query","radius","PlacesService","textSearch","results","PlacesServiceStatus","OK","placePromises","getDetails","placeId","place_id","details","budget","calculateBudgetForPlace","rating","address","formatted_address","photo","photos","getUrl","maxWidth","all","placesData","filter","p","basePerPersonPerDay","travelRatePerKm","base","travel","randomVariation","floor","random","minBudget","maxBudget","toLocaleString"],"sources":["C:\\Users\\TyreseMakhubele\\Documents\\GitHub\\Smart-Travel-Planner-App-Frontend\\src\\components\\maps\\LocationSearch.vue"],"sourcesContent":["<template>\r\n  <div class=\"location-search\">\r\n    <h2>Explore Nearby Sites</h2>\r\n\r\n    <input\r\n      type=\"text\"\r\n      id=\"from-input\"\r\n      class=\"search-input\"\r\n      v-model=\"fromQuery\"\r\n      placeholder=\"From where are you travelling?\"\r\n    />\r\n\r\n    <input\r\n      type=\"text\"\r\n      id=\"location-input\"\r\n      class=\"search-input\"\r\n      v-model=\"searchQuery\"\r\n      placeholder=\"Enter a destination city...\"\r\n    />\r\n\r\n    <div class=\"date-people-inputs\">\r\n      <input type=\"date\" v-model=\"startDate\" class=\"date-input\" />\r\n      <input type=\"date\" v-model=\"endDate\" class=\"date-input\" />\r\n      <input type=\"number\" v-model.number=\"numPeople\" min=\"1\" class=\"people-input\" placeholder=\"People\" />\r\n    </div>\r\n\r\n    <button @click=\"handleSearch\" class=\"search-button\">Search</button>\r\n\r\n    <div v-if=\"loading\" class=\"loading\">Loading sites near you...</div>\r\n\r\n    <div v-if=\"places.length\" class=\"places-list\">\r\n      <div v-for=\"(place, index) in places\" :key=\"index\" class=\"place-card\">\r\n        <img :src=\"place.photo || defaultImage\" alt=\"Place\" class=\"place-image\" />\r\n        <div class=\"place-info\">\r\n          <h3>{{ place.name }}</h3>\r\n          <p>{{ place.address }}</p>\r\n          <p v-if=\"place.rating\">Rating: {{ place.rating }} ‚≠ê</p>\r\n          <p>\r\n            Est. Budget for {{ numPeople }} {{ numPeople > 1 ? \"people\" : \"person\" }}:\r\n            <strong>{{ place.budget }}</strong>\r\n          </p>\r\n          <p v-if=\"distance\">Distance: {{ distance }} km</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n/* global google */\r\nimport { googleMapsApiKey } from \"@/config\";\r\n\r\nexport default {\r\n  name: \"LocationSearch\",\r\n  data() {\r\n    return {\r\n      searchQuery: \"\",\r\n      fromQuery: \"\",\r\n      map: null,\r\n      selectedLocation: null,\r\n      fromLocation: null,\r\n      startDate: \"\",\r\n      endDate: \"\",\r\n      numPeople: 1,\r\n      distance: 0,\r\n      places: [],\r\n      loading: false,\r\n      defaultImage: \"https://via.placeholder.com/150?text=No+Image\",\r\n      apiKey: googleMapsApiKey,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadGoogleMaps();\r\n  },\r\n  computed: {\r\n    numDays() {\r\n      if (!this.startDate || !this.endDate) return 1;\r\n      const start = new Date(this.startDate);\r\n      const end = new Date(this.endDate);\r\n      const days = Math.ceil((end - start) / (1000 * 60 * 60 * 24));\r\n      return days > 0 ? days : 1;\r\n    },\r\n  },\r\n  methods: {\r\n    loadGoogleMaps() {\r\n      if (!window.google || !window.google.maps) {\r\n        const script = document.createElement(\"script\");\r\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${this.apiKey}&libraries=places`;\r\n        script.async = true;\r\n        script.defer = true;\r\n        script.crossOrigin = \"anonymous\";\r\n        script.onload = this.initMap;\r\n        document.head.appendChild(script);\r\n      } else {\r\n        this.initMap();\r\n      }\r\n    },\r\n    initMap() {\r\n      const dummyDiv = document.createElement(\"div\");\r\n      this.map = new google.maps.Map(dummyDiv);\r\n      this.initAutocomplete();\r\n    },\r\n    initAutocomplete() {\r\n      const toInput = document.getElementById(\"location-input\");\r\n      const fromInput = document.getElementById(\"from-input\");\r\n\r\n      const toAutocomplete = new google.maps.places.Autocomplete(toInput, {\r\n        componentRestrictions: { country: \"ZA\" },\r\n        fields: [\"geometry\", \"name\"],\r\n      });\r\n      const fromAutocomplete = new google.maps.places.Autocomplete(fromInput, {\r\n        componentRestrictions: { country: \"ZA\" },\r\n        fields: [\"geometry\", \"name\"],\r\n      });\r\n\r\n      toAutocomplete.addListener(\"place_changed\", () => {\r\n        const place = toAutocomplete.getPlace();\r\n        if (place.geometry) {\r\n          this.selectedLocation = place.geometry.location;\r\n        }\r\n      });\r\n\r\n      fromAutocomplete.addListener(\"place_changed\", () => {\r\n        const place = fromAutocomplete.getPlace();\r\n        if (place.geometry) {\r\n          this.fromLocation = place.geometry.location;\r\n        }\r\n      });\r\n    },\r\n    handleSearch() {\r\n      if (!this.selectedLocation || !this.fromLocation) {\r\n        alert(\"Please select both a 'from' and 'to' location.\");\r\n        return;\r\n      }\r\n\r\n      this.calculateDistance().then(() => {\r\n        this.fetchNearbyPlaces(this.selectedLocation);\r\n      });\r\n    },\r\n    calculateDistance() {\r\n      console.log(\"Calculating distance...\");\r\n      return new Promise((resolve) => {\r\n        const service = new google.maps.DistanceMatrixService();\r\n        service.getDistanceMatrix(\r\n          {\r\n            origins: [this.fromLocation],\r\n            destinations: [this.selectedLocation],\r\n            travelMode: google.maps.TravelMode.DRIVING,\r\n          },\r\n          (response, status) => {\r\n            if (status === \"OK\") {\r\n              const distanceMeters = response.rows[0].elements[0].distance.value;\r\n              this.distance = (distanceMeters / 1000).toFixed(1);\r\n              resolve();\r\n            } else {\r\n              console.error(\"Distance Matrix Error:\", status);\r\n              this.distance = 0;\r\n              resolve();\r\n            }\r\n          }\r\n        );\r\n      });\r\n    },\r\n    fetchNearbyPlaces(location) {\r\n      this.loading = true;\r\n      this.places = [];\r\n\r\n      const request = {\r\n        query: \"tourist attractions, parks, restaurants, museums\",\r\n        location,\r\n        radius: 5000,\r\n      };\r\n\r\n      const service = new google.maps.places.PlacesService(this.map);\r\n      service.textSearch(request, (results, status) => {\r\n        if (status !== google.maps.places.PlacesServiceStatus.OK || !results) {\r\n          console.error(\"Error fetching places:\", status);\r\n          this.loading = false;\r\n          return;\r\n        }\r\n\r\n        const placePromises = results.map((place) => {\r\n          return new Promise((resolve) => {\r\n            service.getDetails(\r\n              {\r\n                placeId: place.place_id,\r\n                fields: [\"name\", \"formatted_address\", \"rating\", \"photos\"],\r\n              },\r\n              (details, status) => {\r\n                if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n                  const budget = this.calculateBudgetForPlace();\r\n                  resolve({\r\n                    name: details.name,\r\n                    rating: details.rating,\r\n                    address: details.formatted_address,\r\n                    photo: details.photos?.[0]?.getUrl({ maxWidth: 300 }) || null,\r\n                    budget: budget,\r\n                  });\r\n                } else {\r\n                  resolve(null);\r\n                }\r\n              }\r\n            );\r\n          });\r\n        });\r\n\r\n        Promise.all(placePromises).then((placesData) => {\r\n          this.places = placesData.filter((p) => p !== null);\r\n          this.loading = false;\r\n        });\r\n      });\r\n    },\r\n    calculateBudgetForPlace() {\r\n      const basePerPersonPerDay = 1000;\r\n      const travelRatePerKm = 5;\r\n\r\n      const base = this.numPeople * this.numDays * basePerPersonPerDay;\r\n      const travel = this.distance * travelRatePerKm;\r\n      const randomVariation = Math.floor(Math.random() * 2000); // R0 - R1999\r\n\r\n      const minBudget = base + travel;\r\n      const maxBudget = minBudget + randomVariation + 1000;\r\n\r\n      return `R${Math.floor(minBudget).toLocaleString()} - R${Math.floor(maxBudget).toLocaleString()}`;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.location-search {\r\n  max-width: 700px;\r\n  margin: auto;\r\n  padding: 2rem;\r\n  text-align: center;\r\n}\r\n\r\n.search-input,\r\n.date-input,\r\n.people-input {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 1rem;\r\n  font-size: 1rem;\r\n  border-radius: 8px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.date-people-inputs {\r\n  display: flex;\r\n  gap: 1rem;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.people-input {\r\n  flex: 1;\r\n}\r\n\r\n.search-button {\r\n  padding: 10px 20px;\r\n  font-size: 1rem;\r\n  border: none;\r\n  background-color: #007BFF;\r\n  color: white;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n}\r\n\r\n.search-button:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.loading {\r\n  margin-top: 1rem;\r\n  font-style: italic;\r\n}\r\n\r\n.places-list {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.place-card {\r\n  display: flex;\r\n  gap: 1rem;\r\n  margin-bottom: 1.5rem;\r\n  padding: 1rem;\r\n  border: 1px solid #eee;\r\n  border-radius: 10px;\r\n  background: #fafafa;\r\n  align-items: center;\r\n  width: 100%;\r\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\r\n}\r\n\r\n.place-image {\r\n  width: 200px;\r\n  height: 200px;\r\n  object-fit: cover;\r\n  border-radius: 8px;\r\n}\r\n\r\n.place-info {\r\n  text-align: left;\r\n  flex: 1;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}