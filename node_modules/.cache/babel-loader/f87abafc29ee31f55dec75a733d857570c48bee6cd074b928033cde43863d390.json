{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/* global google */\n\nexport default {\n  name: \"LocationSearch\",\n  data() {\n    return {\n      searchQuery: \"\",\n      map: null,\n      places: [],\n      loading: false,\n      defaultImage: \"https://via.placeholder.com/150?text=No+Image\",\n      apiKey: \"AIzaSyDxU7_6cH1hUL7Yv_IWXKJ4sVlIQAINp2E\" // Replace with your key\n    };\n  },\n  mounted() {\n    this.loadGoogleMaps();\n  },\n  methods: {\n    loadGoogleMaps() {\n      if (!window.google || !window.google.maps) {\n        const script = document.createElement(\"script\");\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${this.apiKey}&libraries=places`;\n        script.async = true;\n        script.defer = true;\n        script.onload = this.initMap;\n        document.head.appendChild(script);\n      } else {\n        this.initMap();\n      }\n    },\n    initMap() {\n      const dummyDiv = document.createElement(\"div\");\n      this.map = new google.maps.Map(dummyDiv);\n      this.initAutocomplete();\n    },\n    initAutocomplete() {\n      const input = document.getElementById(\"location-input\");\n      const autocomplete = new google.maps.places.Autocomplete(input, {\n        componentRestrictions: {\n          country: \"ZA\"\n        },\n        fields: [\"geometry\"]\n      });\n      autocomplete.addListener(\"place_changed\", () => {\n        const place = autocomplete.getPlace();\n        if (place.geometry && place.geometry.location) {\n          this.fetchPlaces(place.geometry.location);\n        }\n      });\n    },\n    fetchPlaces(location) {\n      this.loading = true;\n      this.places = [];\n      const request = {\n        location,\n        radius: 5000,\n        includedTypes: [\"tourist_attraction\", \"park\", \"museum\", \"restaurant\"],\n        maxResultCount: 20\n      };\n      const place = new google.maps.places.Place();\n      place.searchNearby(request, (response, status) => {\n        if (status === \"OK\") {\n          this.places = response.places.map(p => ({\n            name: p.displayName?.text,\n            address: p.formattedAddress,\n            rating: p.rating,\n            photo: p.photos?.[0]?.getUrl({\n              maxWidth: 300\n            }) || null\n          }));\n        }\n        this.loading = false;\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","searchQuery","map","places","loading","defaultImage","apiKey","mounted","loadGoogleMaps","methods","window","google","maps","script","document","createElement","src","async","defer","onload","initMap","head","appendChild","dummyDiv","Map","initAutocomplete","input","getElementById","autocomplete","Autocomplete","componentRestrictions","country","fields","addListener","place","getPlace","geometry","location","fetchPlaces","request","radius","includedTypes","maxResultCount","Place","searchNearby","response","status","p","displayName","text","address","formattedAddress","rating","photo","photos","getUrl","maxWidth"],"sources":["C:\\Users\\TyreseMakhubele\\Documents\\Other\\P\\SmartTravelApp\\Frontend\\smart-travel-planner\\src\\components\\maps\\LocationSearch.vue"],"sourcesContent":["<template>\r\n    <div class=\"location-search\">\r\n      <h2>Explore Nearby Sites</h2>\r\n  \r\n      <input\r\n        type=\"text\"\r\n        id=\"location-input\"\r\n        class=\"search-input\"\r\n        v-model=\"searchQuery\"\r\n        placeholder=\"Enter a city or location...\"\r\n      />\r\n  \r\n      <div v-if=\"loading\" class=\"loading\">Loading sites near you...</div>\r\n  \r\n      <div v-if=\"places.length\" class=\"places-list\">\r\n        <div\r\n          v-for=\"(place, index) in places\"\r\n          :key=\"index\"\r\n          class=\"place-card\"\r\n        >\r\n          <img\r\n            :src=\"place.photo || defaultImage\"\r\n            alt=\"Place\"\r\n            class=\"place-image\"\r\n          />\r\n          <div class=\"place-info\">\r\n            <h3>{{ place.name }}</h3>\r\n            <p>{{ place.address }}</p>\r\n            <p v-if=\"place.rating\">Rating: {{ place.rating }} ‚≠ê</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  /* global google */\r\n\r\n  export default {\r\n    name: \"LocationSearch\",\r\n    data() {\r\n      return {\r\n        searchQuery: \"\",\r\n        map: null,\r\n        places: [],\r\n        loading: false,\r\n        defaultImage: \"https://via.placeholder.com/150?text=No+Image\",\r\n        apiKey: \"AIzaSyDxU7_6cH1hUL7Yv_IWXKJ4sVlIQAINp2E\", // Replace with your key\r\n      };\r\n    },\r\n    mounted() {\r\n      this.loadGoogleMaps();\r\n    },\r\n    methods: {\r\n      loadGoogleMaps() {\r\n        if (!window.google || !window.google.maps) {\r\n          const script = document.createElement(\"script\");\r\n          script.src = `https://maps.googleapis.com/maps/api/js?key=${this.apiKey}&libraries=places`;\r\n          script.async = true;\r\n          script.defer = true;\r\n          script.onload = this.initMap;\r\n          document.head.appendChild(script);\r\n        } else {\r\n          this.initMap();\r\n        }\r\n      },\r\n      initMap() {\r\n        const dummyDiv = document.createElement(\"div\");\r\n        this.map = new google.maps.Map(dummyDiv);\r\n        this.initAutocomplete();\r\n      },\r\n      initAutocomplete() {\r\n        const input = document.getElementById(\"location-input\");\r\n        const autocomplete = new google.maps.places.Autocomplete(input, {\r\n          componentRestrictions: { country: \"ZA\" },\r\n          fields: [\"geometry\"],\r\n        });\r\n  \r\n        autocomplete.addListener(\"place_changed\", () => {\r\n          const place = autocomplete.getPlace();\r\n          if (place.geometry && place.geometry.location) {\r\n            this.fetchPlaces(place.geometry.location);\r\n          }\r\n        });\r\n      },\r\n      fetchPlaces(location) {\r\n        this.loading = true;\r\n        this.places = [];\r\n  \r\n        const request = {\r\n          location,\r\n          radius: 5000,\r\n          includedTypes: [\"tourist_attraction\", \"park\", \"museum\", \"restaurant\"],\r\n          maxResultCount: 20,\r\n        };\r\n  \r\n        const place = new google.maps.places.Place();\r\n  \r\n        place.searchNearby(request, (response, status) => {\r\n          if (status === \"OK\") {\r\n            this.places = response.places.map((p) => ({\r\n              name: p.displayName?.text,\r\n              address: p.formattedAddress,\r\n              rating: p.rating,\r\n              photo: p.photos?.[0]?.getUrl({ maxWidth: 300 }) || null,\r\n            }));\r\n          }\r\n          this.loading = false;\r\n        });\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .location-search {\r\n    max-width: 600px;\r\n    margin: auto;\r\n    padding: 2rem;\r\n    text-align: center;\r\n  }\r\n  \r\n  .search-input {\r\n    width: 100%;\r\n    padding: 10px;\r\n    font-size: 1rem;\r\n    border-radius: 8px;\r\n    border: 1px solid #ccc;\r\n  }\r\n  \r\n  .loading {\r\n    margin-top: 1rem;\r\n    font-style: italic;\r\n  }\r\n  \r\n  .places-list {\r\n    margin-top: 2rem;\r\n  }\r\n  \r\n  .place-card {\r\n    display: flex;\r\n    gap: 1rem;\r\n    margin-bottom: 1.5rem;\r\n    padding: 1rem;\r\n    border: 1px solid #eee;\r\n    border-radius: 10px;\r\n    background: #fafafa;\r\n    align-items: center;\r\n  }\r\n  \r\n  .place-image {\r\n    width: 100px;\r\n    height: 100px;\r\n    object-fit: cover;\r\n    border-radius: 8px;\r\n  }\r\n  \r\n  .place-info {\r\n    text-align: left;\r\n  }\r\n  </style>\r\n  "],"mappings":";;AAoCE;;AAEA,eAAe;EACbA,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MACfC,GAAG,EAAE,IAAI;MACTC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE,KAAK;MACdC,YAAY,EAAE,+CAA+C;MAC7DC,MAAM,EAAE,yCAAyC,CAAE;IACrD,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,CAAC,CAAC;EACvB,CAAC;EACDC,OAAO,EAAE;IACPD,cAAcA,CAAA,EAAG;MACf,IAAI,CAACE,MAAM,CAACC,MAAK,IAAK,CAACD,MAAM,CAACC,MAAM,CAACC,IAAI,EAAE;QACzC,MAAMC,MAAK,GAAIC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;QAC/CF,MAAM,CAACG,GAAE,GAAI,+CAA+C,IAAI,CAACV,MAAM,mBAAmB;QAC1FO,MAAM,CAACI,KAAI,GAAI,IAAI;QACnBJ,MAAM,CAACK,KAAI,GAAI,IAAI;QACnBL,MAAM,CAACM,MAAK,GAAI,IAAI,CAACC,OAAO;QAC5BN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,MAAM,CAAC;MACnC,OAAO;QACL,IAAI,CAACO,OAAO,CAAC,CAAC;MAChB;IACF,CAAC;IACDA,OAAOA,CAAA,EAAG;MACR,MAAMG,QAAO,GAAIT,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAC9C,IAAI,CAACb,GAAE,GAAI,IAAIS,MAAM,CAACC,IAAI,CAACY,GAAG,CAACD,QAAQ,CAAC;MACxC,IAAI,CAACE,gBAAgB,CAAC,CAAC;IACzB,CAAC;IACDA,gBAAgBA,CAAA,EAAG;MACjB,MAAMC,KAAI,GAAIZ,QAAQ,CAACa,cAAc,CAAC,gBAAgB,CAAC;MACvD,MAAMC,YAAW,GAAI,IAAIjB,MAAM,CAACC,IAAI,CAACT,MAAM,CAAC0B,YAAY,CAACH,KAAK,EAAE;QAC9DI,qBAAqB,EAAE;UAAEC,OAAO,EAAE;QAAK,CAAC;QACxCC,MAAM,EAAE,CAAC,UAAU;MACrB,CAAC,CAAC;MAEFJ,YAAY,CAACK,WAAW,CAAC,eAAe,EAAE,MAAM;QAC9C,MAAMC,KAAI,GAAIN,YAAY,CAACO,QAAQ,CAAC,CAAC;QACrC,IAAID,KAAK,CAACE,QAAO,IAAKF,KAAK,CAACE,QAAQ,CAACC,QAAQ,EAAE;UAC7C,IAAI,CAACC,WAAW,CAACJ,KAAK,CAACE,QAAQ,CAACC,QAAQ,CAAC;QAC3C;MACF,CAAC,CAAC;IACJ,CAAC;IACDC,WAAWA,CAACD,QAAQ,EAAE;MACpB,IAAI,CAACjC,OAAM,GAAI,IAAI;MACnB,IAAI,CAACD,MAAK,GAAI,EAAE;MAEhB,MAAMoC,OAAM,GAAI;QACdF,QAAQ;QACRG,MAAM,EAAE,IAAI;QACZC,aAAa,EAAE,CAAC,oBAAoB,EAAE,MAAM,EAAE,QAAQ,EAAE,YAAY,CAAC;QACrEC,cAAc,EAAE;MAClB,CAAC;MAED,MAAMR,KAAI,GAAI,IAAIvB,MAAM,CAACC,IAAI,CAACT,MAAM,CAACwC,KAAK,CAAC,CAAC;MAE5CT,KAAK,CAACU,YAAY,CAACL,OAAO,EAAE,CAACM,QAAQ,EAAEC,MAAM,KAAK;QAChD,IAAIA,MAAK,KAAM,IAAI,EAAE;UACnB,IAAI,CAAC3C,MAAK,GAAI0C,QAAQ,CAAC1C,MAAM,CAACD,GAAG,CAAE6C,CAAC,KAAM;YACxChD,IAAI,EAAEgD,CAAC,CAACC,WAAW,EAAEC,IAAI;YACzBC,OAAO,EAAEH,CAAC,CAACI,gBAAgB;YAC3BC,MAAM,EAAEL,CAAC,CAACK,MAAM;YAChBC,KAAK,EAAEN,CAAC,CAACO,MAAM,GAAG,CAAC,CAAC,EAAEC,MAAM,CAAC;cAAEC,QAAQ,EAAE;YAAI,CAAC,KAAK;UACrD,CAAC,CAAC,CAAC;QACL;QACA,IAAI,CAACpD,OAAM,GAAI,KAAK;MACtB,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}